// <auto-generated />
using System;
using Metier.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Metier.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20190704131111_MyFirstEntities")]
    partial class MyFirstEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Metier.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("accesHandicapes");

                    b.Property<int?>("codeModalitePedagogiqueId");

                    b.Property<string>("codePublicVise");

                    b.Property<string>("conditionsSpecifiques");

                    b.Property<string>("detailConditionsPriseEnCharge");

                    b.Property<int>("dureeConventionnee");

                    b.Property<string>("dureeIndicative");

                    b.Property<string>("financementFormation");

                    b.Property<string>("fraisRestants");

                    b.Property<string>("hebergement");

                    b.Property<string>("infosPerimetreRecrutement");

                    b.Property<string>("langueFormation");

                    b.Property<int?>("lieuFormationId");

                    b.Property<string>("modaliteAlternance");

                    b.Property<string>("modalitesPedagogiques");

                    b.Property<string>("modlitesRecrutement");

                    b.Property<string>("moyensPedagogiques");

                    b.Property<int>("nbPlaces");

                    b.Property<int>("nombreHeuresCentre");

                    b.Property<int>("nombreHeuresCm");

                    b.Property<int>("nombreHeuresEntreprise");

                    b.Property<int>("nombreHeuresPersonnel");

                    b.Property<int>("nombreHeuresTd");

                    b.Property<int>("nombreHeuresTotal");

                    b.Property<int>("nombreHeuresTpNonTuteure");

                    b.Property<int>("nombreHeuresTpTuteure");

                    b.Property<int?>("organismeFinanceurId");

                    b.Property<int?>("organismeFormateurId");

                    b.Property<float>("prixHoraireTTC");

                    b.Property<float>("prixTotalTTC");

                    b.Property<int?>("responsableEngagementId");

                    b.Property<string>("restauration");

                    b.Property<string>("rythmeFormation");

                    b.Property<string>("transport");

                    b.HasKey("Id");

                    b.HasIndex("codeModalitePedagogiqueId");

                    b.HasIndex("lieuFormationId");

                    b.HasIndex("organismeFinanceurId");

                    b.HasIndex("organismeFormateurId");

                    b.HasIndex("responsableEngagementId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Metier.Entities.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("codeINSEEcanton");

                    b.Property<string>("codeINSEEcommune");

                    b.Property<string>("codepostal");

                    b.Property<string>("departement");

                    b.Property<int?>("geolocalisationId");

                    b.Property<string>("ligne");

                    b.Property<string>("pays");

                    b.Property<string>("region");

                    b.Property<string>("ville");

                    b.HasKey("Id");

                    b.HasIndex("geolocalisationId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("Metier.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("codeCERTIFINFO");

                    b.Property<string>("codeRNCP");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Metier.Entities.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("cle");

                    b.Property<string>("type");

                    b.Property<string>("valeur");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("Metier.Entities.CodeModalitePedagogique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code");

                    b.HasKey("Id");

                    b.ToTable("CodeModalitePedagogiques");
                });

            modelBuilder.Entity("Metier.Entities.Coordonnees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("adresseId");

                    b.Property<string>("civilite");

                    b.Property<string>("courriel");

                    b.Property<int?>("faxId");

                    b.Property<string>("ligne1");

                    b.Property<string>("ligne2");

                    b.Property<string>("ligne3");

                    b.Property<string>("nom");

                    b.Property<int?>("portableId");

                    b.Property<string>("prenom");

                    b.Property<int?>("telfixId");

                    b.Property<int?>("webId");

                    b.HasKey("Id");

                    b.HasIndex("adresseId");

                    b.HasIndex("faxId");

                    b.HasIndex("portableId");

                    b.HasIndex("telfixId");

                    b.HasIndex("webId");

                    b.ToTable("Coordonnees");
                });

            modelBuilder.Entity("Metier.Entities.DomaineFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("codeFORMACODE");

                    b.Property<string>("codeNSF");

                    b.Property<string>("codeROME");

                    b.HasKey("Id");

                    b.ToTable("DomaineFormations");
                });

            modelBuilder.Entity("Metier.Entities.Formation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("actionId");

                    b.Property<bool>("certifiante");

                    b.Property<int?>("certificationId");

                    b.Property<int>("codeNiveauEntree");

                    b.Property<int?>("contactFormationId");

                    b.Property<string>("contenuFormation");

                    b.Property<int>("creditsEcts");

                    b.Property<int?>("domaineFormationId");

                    b.Property<bool>("eligibiliteCpf");

                    b.Property<string>("identifiantModule");

                    b.Property<string>("intituleFormation");

                    b.Property<int?>("modulesPrerequisId");

                    b.Property<string>("objectifFormation");

                    b.Property<int?>("organismeFormationResponsableId");

                    b.Property<string>("resultatsAttendus");

                    b.Property<int?>("sousModuleId");

                    b.Property<int?>("urlFormationId");

                    b.Property<string>("validations");

                    b.HasKey("Id");

                    b.HasIndex("actionId");

                    b.HasIndex("certificationId");

                    b.HasIndex("contactFormationId");

                    b.HasIndex("domaineFormationId");

                    b.HasIndex("modulesPrerequisId");

                    b.HasIndex("organismeFormationResponsableId");

                    b.HasIndex("sousModuleId");

                    b.HasIndex("urlFormationId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("Metier.Entities.Geolocalisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("latitude");

                    b.Property<string>("longitude");

                    b.HasKey("Id");

                    b.ToTable("Geolocalisations");
                });

            modelBuilder.Entity("Metier.Entities.ModulesPrerequis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("referenceModule");

                    b.HasKey("Id");

                    b.ToTable("ModulesPrerequis");
                });

            modelBuilder.Entity("Metier.Entities.Numtel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("numtel");

                    b.HasKey("Id");

                    b.ToTable("Numtels");
                });

            modelBuilder.Entity("Metier.Entities.OrganismeFinanceur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("codeFinanceur");

                    b.Property<int>("nbPlaceFinancees");

                    b.HasKey("Id");

                    b.ToTable("OrganismeFinanceurs");
                });

            modelBuilder.Entity("Metier.Entities.OrganismeFormateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("contactOrganismeId");

                    b.Property<int?>("potentielId");

                    b.Property<string>("raisonSociale");

                    b.Property<string>("siret");

                    b.HasKey("Id");

                    b.HasIndex("contactOrganismeId");

                    b.HasIndex("potentielId");

                    b.ToTable("OrganismeFormateurs");
                });

            modelBuilder.Entity("Metier.Entities.OrganismeFormationResponsable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("agreementDatadock");

                    b.Property<int?>("contactOrganismeId");

                    b.Property<int?>("coordonneesId");

                    b.Property<string>("nomOrganisme");

                    b.Property<string>("numeroActivite");

                    b.Property<int?>("potentielId");

                    b.Property<string>("raisonSociale");

                    b.Property<string>("renseignementsSpecifiques");

                    b.Property<string>("siret");

                    b.HasKey("Id");

                    b.HasIndex("contactOrganismeId");

                    b.HasIndex("coordonneesId");

                    b.HasIndex("potentielId");

                    b.ToTable("OrganismeFormationResponsables");
                });

            modelBuilder.Entity("Metier.Entities.Periode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("debut");

                    b.Property<DateTime>("fin");

                    b.HasKey("Id");

                    b.ToTable("Periodes");
                });

            modelBuilder.Entity("Metier.Entities.Potentiel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("codeFORMACODE");

                    b.HasKey("Id");

                    b.ToTable("Potentiels");
                });

            modelBuilder.Entity("Metier.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActionId");

                    b.Property<int?>("adresseInscriptionId");

                    b.Property<string>("modaliteInscription");

                    b.Property<int?>("periodeId");

                    b.Property<int?>("periodeInscriptionId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("adresseInscriptionId");

                    b.HasIndex("periodeId");

                    b.HasIndex("periodeInscriptionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Metier.Entities.SousModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("referenceModule");

                    b.Property<int>("typeModule");

                    b.HasKey("Id");

                    b.ToTable("SousModules");
                });

            modelBuilder.Entity("Metier.Entities.Web", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("urlWeb");

                    b.HasKey("Id");

                    b.ToTable("Webs");
                });

            modelBuilder.Entity("Metier.Entities.Action", b =>
                {
                    b.HasOne("Metier.Entities.CodeModalitePedagogique", "codeModalitePedagogique")
                        .WithMany()
                        .HasForeignKey("codeModalitePedagogiqueId");

                    b.HasOne("Metier.Entities.Coordonnees", "lieuFormation")
                        .WithMany()
                        .HasForeignKey("lieuFormationId");

                    b.HasOne("Metier.Entities.OrganismeFinanceur", "organismeFinanceur")
                        .WithMany()
                        .HasForeignKey("organismeFinanceurId");

                    b.HasOne("Metier.Entities.OrganismeFormateur", "organismeFormateur")
                        .WithMany()
                        .HasForeignKey("organismeFormateurId");

                    b.HasOne("Metier.Entities.Coordonnees", "responsableEngagement")
                        .WithMany()
                        .HasForeignKey("responsableEngagementId");
                });

            modelBuilder.Entity("Metier.Entities.Adresse", b =>
                {
                    b.HasOne("Metier.Entities.Geolocalisation", "geolocalisation")
                        .WithMany()
                        .HasForeignKey("geolocalisationId");
                });

            modelBuilder.Entity("Metier.Entities.Coordonnees", b =>
                {
                    b.HasOne("Metier.Entities.Adresse", "adresse")
                        .WithMany()
                        .HasForeignKey("adresseId");

                    b.HasOne("Metier.Entities.Numtel", "fax")
                        .WithMany()
                        .HasForeignKey("faxId");

                    b.HasOne("Metier.Entities.Numtel", "portable")
                        .WithMany()
                        .HasForeignKey("portableId");

                    b.HasOne("Metier.Entities.Numtel", "telfix")
                        .WithMany()
                        .HasForeignKey("telfixId");

                    b.HasOne("Metier.Entities.Web", "web")
                        .WithMany()
                        .HasForeignKey("webId");
                });

            modelBuilder.Entity("Metier.Entities.Formation", b =>
                {
                    b.HasOne("Metier.Entities.Action", "action")
                        .WithMany()
                        .HasForeignKey("actionId");

                    b.HasOne("Metier.Entities.Certification", "certification")
                        .WithMany()
                        .HasForeignKey("certificationId");

                    b.HasOne("Metier.Entities.Coordonnees", "contactFormation")
                        .WithMany()
                        .HasForeignKey("contactFormationId");

                    b.HasOne("Metier.Entities.DomaineFormation", "domaineFormation")
                        .WithMany()
                        .HasForeignKey("domaineFormationId");

                    b.HasOne("Metier.Entities.ModulesPrerequis", "modulesPrerequis")
                        .WithMany()
                        .HasForeignKey("modulesPrerequisId");

                    b.HasOne("Metier.Entities.OrganismeFormationResponsable", "organismeFormationResponsable")
                        .WithMany()
                        .HasForeignKey("organismeFormationResponsableId");

                    b.HasOne("Metier.Entities.SousModule", "sousModule")
                        .WithMany()
                        .HasForeignKey("sousModuleId");

                    b.HasOne("Metier.Entities.Web", "urlFormation")
                        .WithMany()
                        .HasForeignKey("urlFormationId");
                });

            modelBuilder.Entity("Metier.Entities.OrganismeFormateur", b =>
                {
                    b.HasOne("Metier.Entities.Coordonnees", "contactOrganisme")
                        .WithMany()
                        .HasForeignKey("contactOrganismeId");

                    b.HasOne("Metier.Entities.Potentiel", "potentiel")
                        .WithMany()
                        .HasForeignKey("potentielId");
                });

            modelBuilder.Entity("Metier.Entities.OrganismeFormationResponsable", b =>
                {
                    b.HasOne("Metier.Entities.Coordonnees", "contactOrganisme")
                        .WithMany()
                        .HasForeignKey("contactOrganismeId");

                    b.HasOne("Metier.Entities.Coordonnees", "coordonnees")
                        .WithMany()
                        .HasForeignKey("coordonneesId");

                    b.HasOne("Metier.Entities.Potentiel", "potentiel")
                        .WithMany()
                        .HasForeignKey("potentielId");
                });

            modelBuilder.Entity("Metier.Entities.Session", b =>
                {
                    b.HasOne("Metier.Entities.Action")
                        .WithMany("Session")
                        .HasForeignKey("ActionId");

                    b.HasOne("Metier.Entities.Adresse", "adresseInscription")
                        .WithMany()
                        .HasForeignKey("adresseInscriptionId");

                    b.HasOne("Metier.Entities.Periode", "periode")
                        .WithMany()
                        .HasForeignKey("periodeId");

                    b.HasOne("Metier.Entities.Periode", "periodeInscription")
                        .WithMany()
                        .HasForeignKey("periodeInscriptionId");
                });
#pragma warning restore 612, 618
        }
    }
}
